<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Je pense donc je suis</title>
    <link>https://wenfeng-gao.github.io/post/</link>
    <description>Recent content in Posts on Je pense donc je suis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Jun 2021 11:49:09 +0800</lastBuildDate><atom:link href="https://wenfeng-gao.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s Informer Mechanics Part III - DeltaFIFO</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-deltafifo/</link>
      <pubDate>Mon, 28 Jun 2021 11:49:09 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-deltafifo/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。作为介绍Informer机制系列文章的第三篇，我们详细分析DeltaFIFO模块的代码实现。</description>
    </item>
    
    <item>
      <title>OKR工作法【克里斯蒂娜•沃特克/著】</title>
      <link>https://wenfeng-gao.github.io/post/book_okr/</link>
      <pubDate>Mon, 14 Jun 2021 12:07:47 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/book_okr/</guid>
      <description>在工作中和个人项目管理上一直使用的是OKR工作法，个人认为有价值并且会长期使用下去，最近阅读了《OKR工作法：谷歌、领英等公司的高绩效秘籍》，发现自己以往的使用上也后很多值得改进的地方，总结一下分享给大家，希望能受益更多的人。</description>
    </item>
    
    <item>
      <title>遥远的救世主【豆豆/著】</title>
      <link>https://wenfeng-gao.github.io/post/book_savior_far_away/</link>
      <pubDate>Sun, 18 Apr 2021 18:25:20 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/book_savior_far_away/</guid>
      <description>为什么要写下读后的思考？因为没有总结提炼的思考如同无根的浮萍，易被时间冲散、消弭，希望通过总结提炼来把思考沉淀下来，一点点的积累与沉淀就如同肠胃消化食物的过程，所摄取的那一点点养分最终形成了我们的价值观与思考体系。</description>
    </item>
    
    <item>
      <title>K8s Informer Mechanics Part II - Reflector</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-reflector/</link>
      <pubDate>Tue, 13 Apr 2021 10:30:39 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-reflector/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。作为介绍Informer机制系列文章的第二篇，我们详细分析Reflector模块的代码实现。</description>
    </item>
    
    <item>
      <title>K8s Informer Mechanics Part I</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics/</link>
      <pubDate>Fri, 05 Feb 2021 11:32:21 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。informer机制是如何工作的呢？</description>
    </item>
    
    <item>
      <title>What Happened to Kubelet When Pod Is Deleted</title>
      <link>https://wenfeng-gao.github.io/post/source-code-kubelet-what-happened-to-kubelet-when-pod-is-deleted/</link>
      <pubDate>Thu, 26 Mar 2020 04:11:32 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/source-code-kubelet-what-happened-to-kubelet-when-pod-is-deleted/</guid>
      <description>The source code of Kubelet is quite complicated. In order to better understand it, we start by thinking about an operation we play normally: delete a pod. What will happen to Kubelet and how will it delete containers eventually? Let&amp;rsquo;s go through the code module by module while keeping these questions in mind.</description>
    </item>
    
    <item>
      <title>Java Attach Mechanism</title>
      <link>https://wenfeng-gao.github.io/post/java-attach-mechanism/</link>
      <pubDate>Mon, 11 Nov 2019 15:26:07 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/java-attach-mechanism/</guid>
      <description>Today, we’ll uncover the mystery of an important mechanism provided by JVM: Attach Mechanism, which is used to enable communication between processes in and out of JVM.</description>
    </item>
    
    <item>
      <title>New() vs Make()</title>
      <link>https://wenfeng-gao.github.io/post/new-vs-make/</link>
      <pubDate>Tue, 05 Nov 2019 21:24:24 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/new-vs-make/</guid>
      <description>This blog will briefly describe the differences between the built-in &lt;code&gt;new()&lt;/code&gt; and &lt;code&gt;make()&lt;/code&gt; functions in Go.</description>
    </item>
    
    <item>
      <title>How to Perf Nodejs Apps in Container</title>
      <link>https://wenfeng-gao.github.io/post/how-to-perf-nodejs-in-container/</link>
      <pubDate>Thu, 24 Oct 2019 09:50:45 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/how-to-perf-nodejs-in-container/</guid>
      <description>In my previous blogs, I&amp;rsquo;ve shared about how to profile Java applications in various of methods, now I&amp;rsquo;ll show you how to profile Nodejs apps with perf&amp;hellip;</description>
    </item>
    
    <item>
      <title>Implemetation of Min Heap</title>
      <link>https://wenfeng-gao.github.io/post/implemetation-of-min-heap/</link>
      <pubDate>Wed, 16 Oct 2019 10:49:40 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/implemetation-of-min-heap/</guid>
      <description>Heap is a basic and important data structure in computer science, I&amp;rsquo;ll share my simple implementation by interger slice in Go, as well as Go&amp;rsquo;s native library&amp;rsquo;s implementation.</description>
    </item>
    
    <item>
      <title>How to Use async-profiler to Profile Non-root Java Process in Contianer</title>
      <link>https://wenfeng-gao.github.io/post/how-to-use-async-profiler-to-profile-java-in-contianer/</link>
      <pubDate>Mon, 14 Oct 2019 15:53:55 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/how-to-use-async-profiler-to-profile-java-in-contianer/</guid>
      <description>In this article, I will share you how to profile non-root java process in container with async-profiler. Async-profiler is one of the popular ways to profile java process, I&amp;rsquo;ll present the process and the difficulties I met while using this tool.</description>
    </item>
    
    <item>
      <title>How To Profile Java Program With eBPF/bcc Tool</title>
      <link>https://wenfeng-gao.github.io/post/profile-java-program-with-bcc-tool/</link>
      <pubDate>Wed, 09 Oct 2019 20:39:11 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/profile-java-program-with-bcc-tool/</guid>
      <description>In this article, I&amp;rsquo;ll share you how to profile Java programs by using eBPF/bcc tools, and generate flame graphs for better understanding.</description>
    </item>
    
    <item>
      <title>8 Classical Sorting Algorithms</title>
      <link>https://wenfeng-gao.github.io/post/8-classical-sorting-algorithms/</link>
      <pubDate>Sun, 29 Sep 2019 23:17:50 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/8-classical-sorting-algorithms/</guid>
      <description>In this article, I&amp;rsquo;ll review the following 8 classical sorting algorithms, and implement them in Go.</description>
    </item>
    
    <item>
      <title>Why Does Kubelet Modify File Permissions</title>
      <link>https://wenfeng-gao.github.io/post/why-kubelet-modify-file-permissions/</link>
      <pubDate>Sun, 29 Sep 2019 16:06:44 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/why-kubelet-modify-file-permissions/</guid>
      <description>Recently, I found an interesting effect. I have some pods which use flexVolume, and after pods are &lt;em&gt;Running&lt;/em&gt;, I&amp;rsquo;ll put some &lt;strong&gt;readOnly&lt;/strong&gt; files in this volume directory. The intersting part is that these files will become &lt;strong&gt;writable&lt;/strong&gt; every time after kubelet being restarted.</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之VolumeManager</title>
      <link>https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/</link>
      <pubDate>Thu, 28 Feb 2019 23:07:20 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/</guid>
      <description>前言 VolumeManager是kubernetes负责管理pod存储相关的重要组件，理解VolumeManager是理解pod生命周期的重</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之PLEG</title>
      <link>https://wenfeng-gao.github.io/post/k8s-pleg-source-code-analysis/</link>
      <pubDate>Fri, 22 Feb 2019 10:55:09 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-pleg-source-code-analysis/</guid>
      <description>PLEG(Pod Lifecycle Event Generator)是kubelet的核心模块，理解pleg对理解kubelet的运行机制很有帮助。本文的源码分析基于v1.13.2版</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之CPU Manager</title>
      <link>https://wenfeng-gao.github.io/post/k8s_cpumanager_source_code/</link>
      <pubDate>Wed, 28 Nov 2018 23:14:35 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s_cpumanager_source_code/</guid>
      <description>背景 Kubelet默认使用CFS Quota/Share的方式来实现Pod的CPU层面约束，而对于cpuset的支持，通过很长一段时间的讨论（</description>
    </item>
    
    <item>
      <title>Core Dump File Size Limit in Docker</title>
      <link>https://wenfeng-gao.github.io/post/core-dump-file-size-limit-in-docker/</link>
      <pubDate>Tue, 15 May 2018 18:24:30 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/core-dump-file-size-limit-in-docker/</guid>
      <description>Background 工作中遇到这样一个问题，运行环境为Docker容器，由于设置了容器的磁盘大小，但是没有设置core dump file的大小（默认为unlimite</description>
    </item>
    
    <item>
      <title>Coroutine With Gevent</title>
      <link>https://wenfeng-gao.github.io/post/coroutine-with-gevent/</link>
      <pubDate>Wed, 21 Feb 2018 18:24:14 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/coroutine-with-gevent/</guid>
      <description>背景 工作中用到gevent。 gevent是一个基于libev的并发库。它为各种并发和网络相关的任务提供了整洁的API。 使用过程中，带着某些问</description>
    </item>
    
    <item>
      <title>Python Yield Keyword</title>
      <link>https://wenfeng-gao.github.io/post/python-yield-keyword/</link>
      <pubDate>Tue, 06 Feb 2018 18:23:56 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/python-yield-keyword/</guid>
      <description>Yield keyword is an important feature in Python language, in order to understand coroutine in Python, we need to understand yield and generator first. However, this feature also makes the Python newbies like me confused a lot, as there&amp;rsquo;s no similar thing in Java or C language.
So in this post, I&amp;rsquo;ll try to explain and conclude what the yield keyword does.
In fact, the same question was posed on stackoverflow, which gains 5951 votes.</description>
    </item>
    
    <item>
      <title>A Little Taste on React</title>
      <link>https://wenfeng-gao.github.io/post/a-little-taste-on-react/</link>
      <pubDate>Wed, 06 Dec 2017 18:23:43 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/a-little-taste-on-react/</guid>
      <description>I have some experience on Android development, and recently for some reason I want to try React Native. As the RN official tutorial said:
 So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, state, and props.
 &amp;ldquo;Maybe I should listen to this guy&amp;rsquo;s suggestion&amp;rdquo;, I said to myself, so I spent a week to understand what is React and how to use it.</description>
    </item>
    
    <item>
      <title>Simple Commit-Msg for Git Hook</title>
      <link>https://wenfeng-gao.github.io/post/simple-commit-msg-hook/</link>
      <pubDate>Thu, 28 Sep 2017 18:23:26 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/simple-commit-msg-hook/</guid>
      <description>Although I am the only contributor of my own Github project, I still want my commit message to be tidier.
I wish all the commit messages will follow the pattern like:
[Example]: This is an Example. [Exercise]: This ia an Exercise. [Problem]: A problem solved. [Other]: Maybe a merge commit.  However, I usually remember to follow this pattern after the commit, that&amp;rsquo;s really disappointed. So I decided to write a simple hook to prevent this kind of Amnesia.</description>
    </item>
    
    <item>
      <title>Basic Shell Commands</title>
      <link>https://wenfeng-gao.github.io/post/basic-shell-commands/</link>
      <pubDate>Sat, 29 Jul 2017 18:23:09 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/basic-shell-commands/</guid>
      <description>公司某个产品的测试环境比较复杂，它需要在 OpenStack 上创建3个节点，其中2个节点安装产品并实现高可用(HA)，第3个节点（TestAgent节点）与产</description>
    </item>
    
    <item>
      <title>A Ping Question</title>
      <link>https://wenfeng-gao.github.io/post/a-ping-question/</link>
      <pubDate>Tue, 04 Jul 2017 18:22:56 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/a-ping-question/</guid>
      <description>Recently, I focus on OpenStack things where an interesting network question comes out: If a host machine has multiple network interfaces, is it possible to ping all of them from another host?
To be clearer, we assume that Host A has a unique network interface 192.168.11.0/24, Host B has 2 interfaces: 192.168.125.0/24 and 192.168.126.0/24. Meanwhile, the 3 interfaces are connected by a router, as the graph illustrated.
If we look at the routing table of Host B, we&amp;rsquo;ll find something like</description>
    </item>
    
    <item>
      <title>Kubernetes on Coreos</title>
      <link>https://wenfeng-gao.github.io/post/kubernetes-on-coreos/</link>
      <pubDate>Tue, 13 Jun 2017 18:22:48 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/kubernetes-on-coreos/</guid>
      <description>Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.
 I just follow the guide of CoreOS + Kubernetes Step By Step to deploy Kubernetes cluster on CoreOS.
Although this guide is detailed, there&amp;rsquo;s still something that will cause misunderstanding and should be paid close attention to. So this post is to help you better follow the guide and setup Kubernetes.
First of all, according to CoreOS cluster architectures, the CoreOS + Kubernetes Step By Step guide is for Easy development/testing cluster or Production cluster with central services, however, what I have is a Small cluster which was set up in the way Setup CoreOS Cluster with Static IPs, that will make some difference to ETCD_ENDPOINTS environment variable.</description>
    </item>
    
    <item>
      <title>Setup Coreos Cluster With Static Ip</title>
      <link>https://wenfeng-gao.github.io/post/setup-coreos-cluster-with-static-ip/</link>
      <pubDate>Thu, 08 Jun 2017 18:22:33 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/setup-coreos-cluster-with-static-ip/</guid>
      <description>We have talked about how to setup a CoreOS cluster in my previous post: Setup CoreOS Cluster Manually with VirtualBox. However, as we setup the cluster in VirtualBox, which uses DHCP as default, the etcd2 may not work when VM&amp;rsquo;s IP changed.
So in this article I&amp;rsquo;ll tell you how to upgrade your cluster and enable the VMs use static IPs instead of DHCP.
Setup Static IP First of all, make sure your cluster node VM uses the bridge connection type (as default), that will enable the connection between outer world, as we are not going to set IP tables.</description>
    </item>
    
    <item>
      <title>Mesos Checkpoint Feature &amp; Master Agent Connection</title>
      <link>https://wenfeng-gao.github.io/post/mesos_checkpoint_feature/</link>
      <pubDate>Thu, 18 May 2017 09:56:49 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/mesos_checkpoint_feature/</guid>
      <description>Mesos在更新版本后将slave改名为agent，所以本文中的agent与mesos-slave完全等同。 本文将讨论的问题： Mesos checkpoint 机制的作用</description>
    </item>
    
    <item>
      <title>Deploy Worldpress in Coreos Cluster Using Fleet</title>
      <link>https://wenfeng-gao.github.io/post/deploy-worldpress-in-coreos-cluster-using-fleet/</link>
      <pubDate>Fri, 03 Jun 2016 18:22:13 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/deploy-worldpress-in-coreos-cluster-using-fleet/</guid>
      <description>In this post, I would like to tell you how to deploy a simple WorldPress service with MySQL database in CoreOS cluster in 3 minutes. You may reference my previous blog to setup a CoreOS cluster locally if you don&amp;rsquo;t have one.
Ok, ssh to one of your cluster node, let&amp;rsquo;s start.
Step 1 Create MySQL service Create a unit file mysql.service
1 2 3 4 5 6 7 8 9 10 11 12  [Unit]Description=MySQL DataBaseAfter=etcd.</description>
    </item>
    
    <item>
      <title>Setup Coreos Cluster Manually with Virtualbox</title>
      <link>https://wenfeng-gao.github.io/post/setup-coreos-cluster-in-virtualbox/</link>
      <pubDate>Mon, 30 May 2016 18:21:53 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/setup-coreos-cluster-in-virtualbox/</guid>
      <description>Recently, I wanted to set up a tiny CoreOS cluster in my laptop, the good news is that with several commands and the existed Vagrantfile offered by the CoreOS official guide, we can setup a cluster in minutes; the bad news is that I don&amp;rsquo;t like everything perfectly done by Vagrant like a magic box, I want to do it total manually, and there&amp;rsquo;s no tutorial as I expected.
So as I made it work finally, it&amp;rsquo;s time to share with others.</description>
    </item>
    
    <item>
      <title>浅谈Docker Bridge网络模式</title>
      <link>https://wenfeng-gao.github.io/post/docker-bridge-network/</link>
      <pubDate>Fri, 20 May 2016 18:21:36 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/docker-bridge-network/</guid>
      <description>本文将简单介绍一下Docker的3中网络模式，然后着重介绍bridge模式的数据传输过程，浅谈Docker容器与宿主机 之间，以及与外部世界的</description>
    </item>
    
    <item>
      <title>Mock With Mockito</title>
      <link>https://wenfeng-gao.github.io/post/mock-with-mockito/</link>
      <pubDate>Fri, 13 May 2016 18:21:19 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/mock-with-mockito/</guid>
      <description>Unit test takes an important role in software development, which ensures the code quality. Mockito is an open-source mocking framework for unit tests in Java. After trying, I found it very nice and easy to use, so this blog aims to introducing Mockito to you.
Why mock? Mock means using a fake thing instead of the original one to help us test, but why do we need that?
Martin Fowler&amp;rsquo;s article Mocks Aren&amp;rsquo;t Stubs makes a lot sense explainning why.</description>
    </item>
    
    <item>
      <title>Setup Jekyll in Windows environment using Docker</title>
      <link>https://wenfeng-gao.github.io/post/setup-jekyll-with-docker/</link>
      <pubDate>Thu, 12 May 2016 18:20:55 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/setup-jekyll-with-docker/</guid>
      <description>Github provides a great service for technique bloggers: Github Pages. Just by creating a repo in GitHub, we can host a domain like http://username.github.io. And with Jekyll we can write blogs with Markdown and preview blog pages locally and conveniently.
The problem for me is that my work environment is Windows, and it&amp;rsquo;s not easy to install Jekyll in Windows(especially in China). So an idea comes out with me is to use Docker.</description>
    </item>
    
  </channel>
</rss>
