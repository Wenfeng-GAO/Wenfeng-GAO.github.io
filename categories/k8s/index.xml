<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Je pense donc je suis</title>
    <link>https://wenfeng-gao.github.io/categories/k8s/</link>
    <description>Recent content in k8s on Je pense donc je suis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Jun 2021 12:09:27 +0800</lastBuildDate><atom:link href="https://wenfeng-gao.github.io/categories/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s Informer Mechanics Part IV - Indexer</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-indexer/</link>
      <pubDate>Mon, 28 Jun 2021 12:09:27 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-indexer/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。作为介绍Informer机制系列文章的第四篇，我们详细分析Indexer模块的代码实现。</description>
    </item>
    
    <item>
      <title>K8s Informer Mechanics Part III - DeltaFIFO</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-deltafifo/</link>
      <pubDate>Mon, 28 Jun 2021 11:49:09 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-deltafifo/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。作为介绍Informer机制系列文章的第三篇，我们详细分析DeltaFIFO模块的代码实现。</description>
    </item>
    
    <item>
      <title>K8s Informer Mechanics Part II - Reflector</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-reflector/</link>
      <pubDate>Tue, 13 Apr 2021 10:30:39 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics-reflector/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。作为介绍Informer机制系列文章的第二篇，我们详细分析Reflector模块的代码实现。</description>
    </item>
    
    <item>
      <title>K8s Informer Mechanics Part I</title>
      <link>https://wenfeng-gao.github.io/post/k8s-informer-mechanics/</link>
      <pubDate>Fri, 05 Feb 2021 11:32:21 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-informer-mechanics/</guid>
      <description>为了能实时从apiserver获取资源的状态及变化，又最大限度得降低apiserver工作负载，k8s 使用了一种叫informer的机制，通过精妙的设计，无需任何中间件，只依靠最简单的http协议 便实现了需求。informer机制是如何工作的呢？</description>
    </item>
    
    <item>
      <title>What Happened to Kubelet When Pod Is Deleted</title>
      <link>https://wenfeng-gao.github.io/post/source-code-kubelet-what-happened-to-kubelet-when-pod-is-deleted/</link>
      <pubDate>Thu, 26 Mar 2020 04:11:32 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/source-code-kubelet-what-happened-to-kubelet-when-pod-is-deleted/</guid>
      <description>The source code of Kubelet is quite complicated. In order to better understand it, we start by thinking about an operation we play normally: delete a pod. What will happen to Kubelet and how will it delete containers eventually? Let&amp;rsquo;s go through the code module by module while keeping these questions in mind.</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之VolumeManager</title>
      <link>https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/</link>
      <pubDate>Thu, 28 Feb 2019 23:07:20 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/</guid>
      <description>前言 VolumeManager是kubernetes负责管理pod存储相关的重要组件，理解VolumeManager是理解pod生命周期的重</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之PLEG</title>
      <link>https://wenfeng-gao.github.io/post/k8s-pleg-source-code-analysis/</link>
      <pubDate>Fri, 22 Feb 2019 10:55:09 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s-pleg-source-code-analysis/</guid>
      <description>PLEG(Pod Lifecycle Event Generator)是kubelet的核心模块，理解pleg对理解kubelet的运行机制很有帮助。本文的源码分析基于v1.13.2版</description>
    </item>
    
    <item>
      <title>Kubernetes源码分析之CPU Manager</title>
      <link>https://wenfeng-gao.github.io/post/k8s_cpumanager_source_code/</link>
      <pubDate>Wed, 28 Nov 2018 23:14:35 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/k8s_cpumanager_source_code/</guid>
      <description>背景 Kubelet默认使用CFS Quota/Share的方式来实现Pod的CPU层面约束，而对于cpuset的支持，通过很长一段时间的讨论（</description>
    </item>
    
    <item>
      <title>Kubernetes on Coreos</title>
      <link>https://wenfeng-gao.github.io/post/kubernetes-on-coreos/</link>
      <pubDate>Tue, 13 Jun 2017 18:22:48 +0800</pubDate>
      
      <guid>https://wenfeng-gao.github.io/post/kubernetes-on-coreos/</guid>
      <description>Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.
 I just follow the guide of CoreOS + Kubernetes Step By Step to deploy Kubernetes cluster on CoreOS.
Although this guide is detailed, there&amp;rsquo;s still something that will cause misunderstanding and should be paid close attention to. So this post is to help you better follow the guide and setup Kubernetes.
First of all, according to CoreOS cluster architectures, the CoreOS + Kubernetes Step By Step guide is for Easy development/testing cluster or Production cluster with central services, however, what I have is a Small cluster which was set up in the way Setup CoreOS Cluster with Static IPs, that will make some difference to ETCD_ENDPOINTS environment variable.</description>
    </item>
    
  </channel>
</rss>
